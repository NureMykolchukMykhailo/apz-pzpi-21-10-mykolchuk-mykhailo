1 ОПИС АРХІТЕКТУРИ IoT ЧАСТИНИ

Smart Device частина програмної системи являє собою датчик, який зчитує дані з автомобіля в реальному часі. Отримані дані датчик відправляє у спеціальну платформу потокової передачі даних Apache Kafka. Для цього датчик повинен бути постійно під’єднаним до мережі Інтернет. Протягом роботи датчик виводить в консоль дані, зчитані з автомобіля. Для передачі даних в Kafka використовується власний двійковий Kafka протокол, працюючий на основі TCP.
Датчик може бути налаштований користувачем та адміністратором, у кожного свої параметри налаштування. Звичайний користувач може змінити дані, які варіюються для окремих автомобілів, наприклад максимальну швидкість та оберти двигуна. Адміністратор може змінити IP-адресу Kafka брокеру та топіку, до якого поступають дані. Логіка ініціалізації налаштувань наведена в додатку В.
Перед тим як змінити налаштування або передивитися їх користувачам потрібно авторизуватися. Пристрій звернеться до серверу та перевірить чи існує такий користувач. Логіка авторизації наведена в додатку Б. 
Код датчика написаний на C#, що максимально спрощує розробку та дозволяє не піклуватися про виділення пам’яті. 

2 РОЗРОБКА UML ДІАГРАМИ ПРЕЦЕДЕНТІВ

Для опису поведінки IoT частини системи використовується UML діаграма прецедентів.
Головним актором системи є «Smart Device». «Smart Device», тобто датчик має можливості зачитування відповідних даних з автомобіля протягом поїдки та відправки їх у платформу потокової передачі подій. Перед відправкою дані агрегуються.
Актор «Користувач» може змінювати налаштування датчика, а саме змінювати критичні значення для поїздки, наприклад яку швидкість вважати максимальною, які оберти двигуна вважати надто високими.
Актор «Адміністратор» може змінювати IP-адресу брокеру Kafka та назву топіку Kafka.

3 РОЗРОБКА UML ДІАГРАМИ ДІЯЛЬНОСТІ

Діаграма діяльності використовується для моделювання динамічних аспектів системи. Вона дозволяє відобразити послідовність дій або потоків управління у системі, бізнес-процесі або між користувачами.
На діаграмі наведений процес зчитування, агрегації та відправки даних в Apache Kafka. При завершенні поїздки відправляється спеціальне повідомлення, завдяки якому сервер зрозуміє, що поїздка саме цього автомобіля завершена і можна переходити до аналізу станів. Код цієї діяльності наведений в додатку А.

4 РОЗРОБКА UML ДІАГРАМИ ВЗАЄМОДІЇ

Діаграма взаємодії використовується для візуалізації та моделювання поведінки системи, особливо в контексті обміну повідомленнями між різними об'єктами або компонентами системи.
На діаграмі можна побачити, що після відправки повідомлення в Kafka, пристрій чекає підтвердження, що повідомлення прийнято Kafka. Ця опція підтримується самою Kafka, за бажанням її можна вимкнути, але тоді не гарантується цілісність даних. Кожного разу пристрій перевіряє, чи це останнє повідомлення, і якщо так, відправляє спеціальне повідомлення в Kafka для того щоб сервер зрозумів, що поїздка завершена і можна перейти до аналізу.

5 РОЗРОБКА UML ДІАГРАМИ КОМПОНЕНТІВ

Створення UML діаграми компонентів дозволяє промоделювати високорівневу архітектуру системи, ідентифікувати основні компоненти та їх зв’язки.
На діаграмі проілюстровані компоненти та їх залежності:
1)	Компонент датчика, який містить в собі компонент стану автомобіля в певний період часу;
2)	Компонент кластеру Apache Kafka, який містить в собі компонент топіку, а той містить компонент партиції;
3)	Компонент серверу, який споживає події з Kafka компонентом слухання подій, а по закінченню поїздки передасть дані на обробку компоненту аналіза станів;

ВИСНОВКИ

За результатами лабораторної ми розробили програмне забезпечення для SmartDevice пристрою, реалізованого на базі C#. Net. Функціонал пристрою повністю відповідає потребам користувачів системи. Пристрій підтримує можливість налаштування як користувачем, так і адміністратором.
