1 ОПИС АРХІТЕКТУРИ MOBILE ЧАСТИНИ

Мобільний застосунок був розроблений в якості користувацького інтерфейсу, щоб користувачі могли взаємодіяти з серверною частиною через GUI. Застосунок розроблений для операційної системи Android. Це найбільш поширена платформа для мобільних пристроїв. Застосунок взаємодіє з серверною частиною по протоколу HTTP. Застосунок підтримує локалізацію. Доступні англійська та українська мови.
Для кодування цієї чистини програмної системи використовувалась мова програмування Kotlin. Розробка велася в середовищі розробки Android Studio.
Всередині застосунку моделі даних, функціонал звернення до серверної частини та функціонал відображення відокремлені один від одного. Звернення до сервера йде через контролери, моделі даних знаходяться в директорії моделей, функціонал відображення даних знаходяться в директорії користувацького інтерфейсу. Такий підхід відповідає шаблону проектування MVC (Модель–представлення–контролер), він спрощує внесення майбутніх змін або розширення проекту, а також забезпечує можливість повторного використання окремих компонентів. Використання цього шаблону у великих системах сприяє впорядкованості їхньої структури та робить їх більш зрозумілими завдяки зменшенню складності.
Авторизація здійснюється за допомогою JWT токенів. Користувач надсилає на сервер адресу своєї електронної пошти та пароль, сервер у відповідь формує токен, в якому зашифрований ідентифікатор користувача в базі даних. Токен зберігається у файлі налаштувань SharedPreference. Коли користувач звертається до сервера, токен розміщується в заголовках HTTP запиту, сервер розшифровує токен та розуміє хто до нього звернувся. Код створення та налаштування екземпляру Retrofit для виконання HTTP-запитів та автоматичного додавання JWT токену до заголовків запитів наведений в додатку А. Код менеджера токенів, що додає та дістає токен з SharedPreference наведений в додатку Б.

2 РОЗРОБКА UML ДІАГРАМИ ПРЕЦЕДЕНТІВ

Для опису поведінки мобільного застосунку та можливостей користувачів використовується UML діаграма прецедентів.
Головним актором мобільного застосунку є «Користувач». Користувач може авторизуватися в системі, а якщо він ще не зареєстрований – зареєструватися. Після авторизації він зможе подивитися зареєстровані ним автомобілі, датчики та підлеглих водіїв.
Він може передивитися детальну інформацію по кожній з цих сутностей, додати нову сутність. Підлеглому водію можна призначити один з автомобілів, тоді в інформації про автомобіль він з’явиться в якості одного з водіїв цього автомобіля. Водій може бути під’єднаним тільки до одного автомобіля, але у автомобіля може бути декілька водіїв.
Також до автомобіля можна під’єднати датчик, тоді після закінчення поїздки буде зроблений її аналіз і за автомобілем закріпиться звіт по поїздці. У одного автомобіля може бути один датчик.

3 РОЗРОБКА UML ДІАГРАМИ ДІЯЛЬНОСТІ

Діаграма діяльності використовується для моделювання динамічних аспектів системи. Вона дозволяє відобразити послідовність дій або потоків управління у системі, бізнес-процесі або між користувачами.
На діаграмі можемо бачити процес роботи мобільного застосунку. Неавторизований користувач має авторизуватися, а якщо в нього ще немає акаунта – зареєструватися.
Після авторизації відкриється головна активність, з якої можна потрапити в активності перегляду автомобілів, датчиків, підлеглих водіїв. Навігація у застосунку здійснюється на допомогою навігаційного меню.
З кожної активності перегляду сутностей можна або перейти до додавання нової такої сутності, або до детального перегляду окремої сутності зі списку. Після того, як всі дії будуть виконані, застосунок можна закрити.

4 РОЗРОБКА UML ДІАГРАМИ ПАКУНКІВ

Діаграма пакунків використовується для візуалізації організації та структури моделювання системи. Вона надає засіб для групування елементів моделі (наприклад, класів, інтерфейсів, пакетів та інших) логічні блоки, звані пакунками.
На діаграмі можемо бачити такі пакунки:
-	App – основний (кореневий) пакунок, який містить в собі всі інші пакунки.
-	Models – пакет, який містить моделі відповідно до MVC архітектури;
-	Network – містить класи для роботи та маршрути для звернення до серверної частини.
-	Storage – містить класи для роботи з внутрішнім сховищем застосунку
-	UI – містить фрагменти, класи ViewModel, адаптери для відображення даних у застосунку.
-	Res – містить XML файли розмітки та файли ресурсів застосунку.

5 РОЗРОБКА UML ДІАГРАМИ КОМПОНЕНТІВ

Створення UML діаграми компонентів дозволяє промоделювати високорівневу архітектуру системи, ідентифікувати основні компоненти та їх зв’язки.
На діаграмі проілюстровані компоненти та їх залежності:
1)	Компонент акаунту користувача;
2)	Компонент активності авторизації. З нього можна потрапити у компонент активності реєстрації;
3)	Компонент головної активності. З нього можна потрапити в активності автомобілів, підлеглих водіїв, датчиків;
4)	Компонент автомобілів
5)	Компонент підлеглих водіїв
6)	Компонент датчиків

ВИСНОВКИ

За результатами лабораторної роботи ми розробили мобільний застосунок, використовуючи мову програмування Kotlin. Функціонал застосунку повністю відповідає потребам користувачів системи.
